diff --git a/src/crypto.c b/src/crypto.c
index f69775b..4ad852b 100644
--- a/src/crypto.c
+++ b/src/crypto.c
@@ -164,6 +164,8 @@ void crypto_compute_symmetric_key(const uint8_t *public_key,
 #pragma GCC diagnostic pop
 #endif
 
+#define STACK_BUFFER_MAXSIZE (2 * 1024)
+
 ssize_t crypto_encrypt(const uint8_t *key, const uint8_t *nonce,
                        const uint8_t *plain, size_t length, uint8_t *encrypted)
 {
@@ -173,20 +175,42 @@ ssize_t crypto_encrypt(const uint8_t *key, const uint8_t *nonce,
     if (length == 0 || !key || !nonce || !plain || !encrypted)
         return -1;
 
-    _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
-    _encrypted = (uint8_t *)alloca(length + crypto_box_MACBYTES + crypto_box_BOXZEROBYTES);
+    if(length > STACK_BUFFER_MAXSIZE) {
+        _plain = (uint8_t *)malloc(length + crypto_box_ZEROBYTES);
+        if(!_plain)
+            return -1;
+        _encrypted = (uint8_t *)malloc(length + crypto_box_MACBYTES + crypto_box_BOXZEROBYTES);
+        if(!_encrypted) {
+            free(_plain);
+            return -1;
+        }
+    } else {
+        _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
+        _encrypted = (uint8_t *)alloca(length + crypto_box_MACBYTES + crypto_box_BOXZEROBYTES);
+    }
 
     // Pad the plain with 32 zero bytes.
     memset(_plain, 0, crypto_box_ZEROBYTES);
     memcpy(_plain + crypto_box_ZEROBYTES, plain, length);
 
     if (crypto_box_afternm(_encrypted, _plain, length + crypto_box_ZEROBYTES,
-                           nonce, key) != 0)
+                           nonce, key) != 0) {
+        if(length > STACK_BUFFER_MAXSIZE) {
+            free(_plain);
+            free(_encrypted);
+        }
         return -1;
+    }
 
     /* Unpad the encrypted message. */
     memcpy(encrypted, _encrypted + crypto_box_BOXZEROBYTES,
            length + crypto_box_MACBYTES);
+
+    if(length > STACK_BUFFER_MAXSIZE) {
+        free(_plain);
+        free(_encrypted);
+    }
+
     return length + crypto_box_MACBYTES;
 }
 
@@ -215,18 +239,40 @@ ssize_t crypto_decrypt(const uint8_t *key, const uint8_t *nonce,
         || !encrypted || !plain)
         return -1;
 
-    _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
-    _encrypted = (uint8_t *)alloca(length + crypto_box_BOXZEROBYTES);
+    if(length > STACK_BUFFER_MAXSIZE) {
+        _plain = (uint8_t *)malloc(length + crypto_box_ZEROBYTES);
+        if(!_plain)
+            return -1;
+        _encrypted = (uint8_t *)malloc(length + crypto_box_BOXZEROBYTES);
+        if(!_encrypted) {
+            free(_plain);
+            return -1;
+        }
+    } else {
+        _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
+        _encrypted = (uint8_t *)alloca(length + crypto_box_BOXZEROBYTES);
+    }
 
     // Pad the encrypted message with 16 zero bytes.
     memset(_encrypted, 0, crypto_box_BOXZEROBYTES);
     memcpy(_encrypted + crypto_box_BOXZEROBYTES, encrypted, length);
 
     if (crypto_box_open_afternm(_plain, _encrypted,
-                        length + crypto_box_BOXZEROBYTES, nonce, key) != 0)
+                        length + crypto_box_BOXZEROBYTES, nonce, key) != 0) {
+        if(length > STACK_BUFFER_MAXSIZE) {
+            free(_plain);
+            free(_encrypted);
+        }
         return -1;
+    }
 
     memcpy(plain, _plain + crypto_box_ZEROBYTES, length - crypto_box_MACBYTES);
+
+    if(length > STACK_BUFFER_MAXSIZE) {
+        free(_plain);
+        free(_encrypted);
+    }
+
     return length - crypto_box_MACBYTES;
 }
 
