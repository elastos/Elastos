# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import node_rpc_pb2 as node__rpc__pb2


class NodeRpcStub(object):
  """The service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RpcMethod = channel.unary_unary(
        '/node_rpc.NodeRpc/RpcMethod',
        request_serializer=node__rpc__pb2.Request.SerializeToString,
        response_deserializer=node__rpc__pb2.Response.FromString,
        )


class NodeRpcServicer(object):
  """The service definition.
  """

  def RpcMethod(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NodeRpcServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RpcMethod': grpc.unary_unary_rpc_method_handler(
          servicer.RpcMethod,
          request_deserializer=node__rpc__pb2.Request.FromString,
          response_serializer=node__rpc__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'node_rpc.NodeRpc', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
