"""
Django settings for elastos_console_main project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import rollbar
from decouple import config, Csv
from qr_code.qrcode import constants


def is_ec2_linux():
    """Detect if we are running on an EC2 Linux Instance
        See http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/identify_ec2_instances.html
    """
    if os.path.isfile("/sys/hypervisor/uuid"):
        with open("/sys/hypervisor/uuid") as f:
            uuid = f.read()
            return uuid.startswith("ec2")
    return False


def get_linux_ec2_private_ip():
    """Get the private IP Address of the machine if running on an EC2 linux server"""
    from urllib.request import urlopen
    if not is_ec2_linux():
        return None
    try:
        response = urlopen('http://169.254.169.254/latest/meta-data/local-ipv4')
        return response.read()
    except:
        return None
    finally:
        if response:
            response.close()


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

development = config('DEVELOPMENT', default=False, cast=bool)
if not development:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# ElasticBeanstalk healthcheck sends requests with host header = internal ip
# So we detect if we are in elastic beanstalk,
# and add the instances private ip address
ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())
private_ip = get_linux_ec2_private_ip()
if private_ip:
    private_ip = "." + private_ip.decode("utf-8")
    ALLOWED_HOSTS.append(private_ip)

# Application definition

INSTALLED_APPS = [
    'sass_processor',
    'admin_tools',
    'admin_tools.theming',
    'admin_tools.menu',
    'admin_tools.dashboard',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'qr_code',
    'django_extensions',
    'mathfilters',
    'django_simple_cookie_consent',
    'console_main.apps.ConsoleMainConfig',
    'login.apps.LoginConfig',
    'service.apps.ServiceConfig',
    'browser.apps.BrowserConfig',
    'elastos_trinity.apps.ElastosTrinityConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware'
]

ROOT_URLCONF = 'console_main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [
                'admin_tools.template_loaders.Loader',
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                ]),
            ],
        },
    },
]

WSGI_APPLICATION = 'console_main.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
    }
}

# Use Custom User
AUTH_USER_MODEL = 'login.DIDUser'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

# SMTP Server(Using Zoho)
DEFAULT_FROM_EMAIL = 'support@nucleusconsole.com'
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_PORT = config('EMAIL_PORT')

# Change default value for when session variable is modified
SESSION_SAVE_EVERY_REQUEST = True

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Rollbar
ROLLBAR = {
    'access_token': config('ROLLBAR_ACCESS_TOKEN'),
    'environment': 'development' if DEBUG else 'production',
    'branch': 'master',
    'root': BASE_DIR
}

# In elastic beanstalk, LOG_DIR is set to /opt/python/log
# See .ebextensions/{{cookiecutter.project_name}}.config
# All other environments, LOG_DIR is empty, which means
# log files are created in current working directory
LOG_DIR = config('LOG_DIR', default='')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(name)s %(message)s'
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'file': {
            'level': config('LOG_LEVEL', default='INFO'),
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'when': 'midnight',
            'backupCount': 10,
            'filename': os.path.join(LOG_DIR, 'elastos-nucleus.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['require_debug_true'],
            'formatter': 'verbose'
        },
        'sql': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'backupCount': 10,
            'filename': os.path.join(LOG_DIR, 'queries.log'),
            'filters': ['require_debug_true'],
            'formatter': 'verbose',
        },
        'rollbar': {
            'filters': ['require_debug_false'],
            'access_token': config('ROLLBAR_ACCESS_TOKEN'),
            'environment': 'production',
            'class': 'rollbar.logger.RollbarHandler',
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file', 'rollbar'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins', 'rollbar'],
            'level': 'ERROR',
            'propagate': True,
        },
        'elastos-nucleus': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'DEBUG',
            'handlers': ['sql'],
            'propagate': False,
        }
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "www", "static")
STATIC_URL = '/static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'documents')
MEDIA_URL = '/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "assets"),
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'sass_processor.finders.CssFinder',
]

# Django Sass
SASS_PROCESSOR_ROOT = os.path.join(BASE_DIR, "www", "static")
SASS_PROCESSOR_INCLUDE_FILE_PATTERN = r'^.+\.scss$'

# Include scss directory for Sass processor
SASS_PROCESSOR_INCLUDE_DIRS = [
    os.path.join(BASE_DIR, 'www/static/scss'),
]

# Caches.
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
    'qr-code': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'qr-code-cache',
        'TIMEOUT': 3600
    }
}

# Django QR Code specific options.
QR_CODE_CACHE_ALIAS = 'qr-code'
QR_CODE_URL_PROTECTION = {
    # Optional random token length for URL protection. Defaults to 20.
    constants.TOKEN_LENGTH: 30,
    # Optional signing key for URL token. Uses SECRET_KEY if not defined.
    constants.SIGNING_KEY: config('SIGNING_KEY'),
    # Optional signing salt for URL token.
    constants.SIGNING_SALT: config('SIGNING_SALT'),
    constants.ALLOWS_EXTERNAL_REQUESTS_FOR_REGISTERED_USER: False
    # Tells whether a registered user can request the QR code URLs from outside a site that uses this app. It can be
    # a boolean value used for any user, or a callable that takes a user as parameter. Defaults to False (nobody can
    # access the URL without the security token).
}

# all application names
ALL_APPS = [
    'console_main',
    'login',
    'service',
    'browser',
    'elastos_trinity'
]

# Configuration for python grpc client library(elastos-adenine)
SHARED_SECRET_ADENINE = config('SHARED_SECRET_ADENINE')
PRODUCTION = config('PRODUCTION', default=False, cast=bool)
GRPC_SERVER_HOST = config('GRPC_SERVER_HOST')
GRPC_SERVER_PORT = config('GRPC_SERVER_PORT')
