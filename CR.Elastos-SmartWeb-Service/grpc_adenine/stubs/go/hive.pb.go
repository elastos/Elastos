// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hive.proto

package hive

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message
type Request struct {
	Input                string   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	FileContent          []byte   `protobuf:"bytes,2,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_d635d1ead41ba02c, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

func (m *Request) GetFileContent() []byte {
	if m != nil {
		return m.FileContent
	}
	return nil
}

// The response message
type Response struct {
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	StatusMessage        string   `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	Status               bool     `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	FileContent          []byte   `protobuf:"bytes,4,opt,name=file_content,json=fileContent,proto3" json:"file_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_d635d1ead41ba02c, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *Response) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Response) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *Response) GetFileContent() []byte {
	if m != nil {
		return m.FileContent
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "hive.Request")
	proto.RegisterType((*Response)(nil), "hive.Response")
}

func init() {
	proto.RegisterFile("hive.proto", fileDescriptor_d635d1ead41ba02c)
}

var fileDescriptor_d635d1ead41ba02c = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xc8, 0x2c, 0x4b,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x9c, 0xb8, 0xd8, 0x83, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0x33, 0xf3, 0x0a, 0x4a, 0x4b, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x45, 0x2e, 0x9e, 0xb4, 0xcc, 0x9c, 0xd4, 0xf8,
	0xe4, 0xfc, 0xbc, 0x92, 0xd4, 0xbc, 0x12, 0x09, 0x26, 0xa0, 0x24, 0x4f, 0x10, 0x37, 0x48, 0xcc,
	0x19, 0x22, 0xa4, 0xd4, 0xc2, 0xc8, 0xc5, 0x11, 0x94, 0x5a, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a,
	0x24, 0xc6, 0xc5, 0x96, 0x5f, 0x5a, 0x82, 0x30, 0x06, 0xca, 0x13, 0x52, 0xe5, 0xe2, 0x2b, 0x2e,
	0x49, 0x2c, 0x29, 0x2d, 0x8e, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x05, 0x9b, 0xc4, 0x19,
	0xc4, 0x0b, 0x11, 0xf5, 0x85, 0x08, 0x82, 0xb4, 0x43, 0x04, 0x24, 0x98, 0x81, 0xd2, 0x1c, 0x41,
	0x50, 0x1e, 0x86, 0x33, 0x58, 0x30, 0x9c, 0x61, 0x94, 0xc5, 0xc5, 0xe2, 0x01, 0xf4, 0x92, 0x90,
	0x01, 0x17, 0x6f, 0x68, 0x41, 0x4e, 0x7e, 0x62, 0x8a, 0x63, 0x5e, 0x4a, 0x70, 0x66, 0x7a, 0x9e,
	0x10, 0xaf, 0x1e, 0xd8, 0xdb, 0x50, 0x7f, 0x4a, 0xf1, 0xc1, 0xb8, 0x10, 0x17, 0x2b, 0x31, 0x80,
	0x74, 0x84, 0xa5, 0x16, 0x65, 0xa6, 0x55, 0x82, 0x74, 0x64, 0xe4, 0x97, 0x13, 0xd4, 0x91, 0xc4,
	0x06, 0x0e, 0x43, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x9a, 0x9f, 0x55, 0x51, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HiveClient is the client API for Hive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HiveClient interface {
	UploadAndSign(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	VerifyAndShow(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type hiveClient struct {
	cc grpc.ClientConnInterface
}

func NewHiveClient(cc grpc.ClientConnInterface) HiveClient {
	return &hiveClient{cc}
}

func (c *hiveClient) UploadAndSign(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/hive.Hive/UploadAndSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveClient) VerifyAndShow(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/hive.Hive/VerifyAndShow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiveServer is the server API for Hive service.
type HiveServer interface {
	UploadAndSign(context.Context, *Request) (*Response, error)
	VerifyAndShow(context.Context, *Request) (*Response, error)
}

// UnimplementedHiveServer can be embedded to have forward compatible implementations.
type UnimplementedHiveServer struct {
}

func (*UnimplementedHiveServer) UploadAndSign(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAndSign not implemented")
}
func (*UnimplementedHiveServer) VerifyAndShow(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAndShow not implemented")
}

func RegisterHiveServer(s *grpc.Server, srv HiveServer) {
	s.RegisterService(&_Hive_serviceDesc, srv)
}

func _Hive_UploadAndSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServer).UploadAndSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive.Hive/UploadAndSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServer).UploadAndSign(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hive_VerifyAndShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServer).VerifyAndShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive.Hive/VerifyAndShow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServer).VerifyAndShow(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hive.Hive",
	HandlerType: (*HiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadAndSign",
			Handler:    _Hive_UploadAndSign_Handler,
		},
		{
			MethodName: "VerifyAndShow",
			Handler:    _Hive_VerifyAndShow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hive.proto",
}
